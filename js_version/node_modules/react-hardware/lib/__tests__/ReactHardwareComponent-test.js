'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _HardwareManager = require('../HardwareManager');

var HardwareManager = _interopRequireWildcard(_HardwareManager);

var _ReactHardwareComponent = require('../ReactHardwareComponent');

var _ReactHardwareComponent2 = _interopRequireDefault(_ReactHardwareComponent);

var _ReactHardwareReconcileTransaction = require('../ReactHardwareReconcileTransaction');

var _ReactHardwareReconcileTransaction2 = _interopRequireDefault(_ReactHardwareReconcileTransaction);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

describe('ReactHardwareComponent', function () {
  xdescribe('mountComponent', function () {
    it('should mount component', function () {
      var willMount = jasmine.createSpy();
      var didMount = jasmine.createSpy();

      var Component = function (_React$Component) {
        _inherits(Component, _React$Component);

        function Component() {
          _classCallCheck(this, Component);

          return _possibleConstructorReturn(this, Object.getPrototypeOf(Component).apply(this, arguments));
        }

        _createClass(Component, [{
          key: 'componentWillMount',
          // eslint-disable-line
          value: function componentWillMount() {
            willMount();
          }
        }, {
          key: 'componentDidMount',
          value: function componentDidMount() {
            didMount();
          }
        }, {
          key: 'render',
          value: function render() {
            return _react2.default.createElement('pin', { pin: 13, value: 255, mode: 'OUTPUT' });
          }
        }]);

        return Component;
      }(_react2.default.Component);

      expect(willMount).toHaveBeenCalled();
      expect(didMount).toHaveBeenCalled();
    });
  });

  describe('receiveComponent', function () {
    var gen = void 0;
    beforeEach(function () {
      var NodeStub = function NodeStub(initialProps) {
        this._currentElement = { props: initialProps };
        this._rootNodeID = 'test';
      };
      NodeStub.prototype = new _ReactHardwareComponent2.default({
        validAttributes: {
          pin: true,
          value: true
        }
      });

      Object.assign(NodeStub.prototype, _ReactHardwareComponent2.default.Mixin);

      gen = function gen(props) {
        return new NodeStub(props);
      };
    });

    it('should receive component', function () {
      spyOn(HardwareManager, 'validatePayloadForPin');
      spyOn(HardwareManager, 'setPayloadForPin');
      var transaction = new _ReactHardwareReconcileTransaction2.default();

      var inst = gen({ pin: 13, value: 255 });
      expect(inst._currentElement.props.pin).toBe(13);
      expect(inst._currentElement.props.value).toBe(255);

      inst.receiveComponent(gen({ pin: 13, value: 0 })._currentElement, transaction, {});

      expect(inst._currentElement.props.pin).toBe(13);
      expect(inst._currentElement.props.value).toBe(0);
    });

    it('should warn if attempting to change pin', function () {
      var transaction = new _ReactHardwareReconcileTransaction2.default();

      var inst = gen({ pin: 13, value: 255 });
      expect(function (_) {
        inst.receiveComponent(gen({ pin: 14, value: 255 })._currentElement, transaction, {});
      }).toThrow(new Error('A mounted component cannot be mounted into a new Pin. The `pin` ' + 'attribute is immutable. Check the render function of undefined.'));
    });
  });
});