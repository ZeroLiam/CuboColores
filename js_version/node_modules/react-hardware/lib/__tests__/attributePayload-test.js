'use strict';

var _attributePayload = require('../attributePayload');

// most of these test cases come from ReactNative

describe('attributePayload', function () {
  describe('create', function () {
    it('should return null when no valid attributes passed', function () {
      expect((0, _attributePayload.create)({ c: 'a', d: 'b' }, { a: true, b: true })).toEqual(null);
    });

    it('should filter out invalid attributes', function () {
      expect((0, _attributePayload.create)({ a: 'a', b: 'b', c: 'nope' }, { a: true, b: true })).toEqual({ a: 'a', b: 'b' });
    });

    it('should return non-primitive valid attributes', function () {
      expect((0, _attributePayload.create)({ pins: [1, 2, 3], values: [0, 255, 0] }, { pins: true, values: true })).toEqual({ pins: [1, 2, 3], values: [0, 255, 0] });
    });
  });

  describe('update', function () {
    it('should return null for identical props', function () {
      expect((0, _attributePayload.diff)({ a: 1, b: 2 }, { a: 1, b: 2 }, { a: true, b: true })).toEqual(null);
    });

    it('should work with simple example', function () {
      expect((0, _attributePayload.diff)({ a: 1, c: 3 }, { b: 2, c: 3 }, { a: true, b: true })).toEqual({ a: null, b: 2 });
    });

    it('should work with another simple example', function () {
      expect((0, _attributePayload.diff)({ a: 1, c: 3 }, { a: '4', b: 2, c: 3 }, { a: true, b: true })).toEqual({ a: '4', b: 2 });
    });

    it('should remove fields', function () {
      expect((0, _attributePayload.diff)({ a: 1 }, {}, { a: true })).toEqual({ a: null });
    });

    it('should diff non-primitive valid attributes', function () {
      expect((0, _attributePayload.diff)({ pins: [1, 2, 3], values: [0, 255, 0] }, { pins: [1, 2, 3], values: [255, 125, 125] }, { pins: true, values: true })).toEqual({ pins: [1, 2, 3], values: [255, 125, 125] });
    });

    it('should diff functions', function () {
      var fn1 = function fn1() {};
      var fn2 = function fn2() {};
      expect((0, _attributePayload.diff)({ a: fn1 }, { a: fn2 }, { a: true })).toEqual({ a: fn2 });
    });
  });
});