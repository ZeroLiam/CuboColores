'use strict';

var _mockFirmata = require('mock-firmata');

var _HardwareManager = require('../HardwareManager');

describe('HardwareManager', function () {

  describe('validatePayloadForPin', function () {
    var hw = void 0;
    beforeEach(function () {
      // default Firmata pin mapping is an Uno
      hw = new _mockFirmata.Firmata();
    });

    it('should handle an easy case', function () {
      expect(function () {
        (0, _HardwareManager.validatePayloadForPin)({ board: hw, readers: [] }, { pin: 0,
          value: 255,
          mode: 'DIGITAL'
        });
      }).not.toThrow();
    });

    it('should throw for invalid pins', function () {
      var error = new Error('Unsupported mode "ANALOG" for pin "0".\n' + 'Supported modes are: "DIGITAL"');
      error.name = 'Invariant Violation';

      expect(function () {
        (0, _HardwareManager.validatePayloadForPin)({ board: hw, readers: [] }, { pin: 0,
          value: 255,
          mode: 'ANALOG'
        });
      }).toThrow(error);
    });

    it('should list all valid pins', function () {
      var error = new Error('Unsupported mode "PWM" for pin "17".\n' + 'Supported modes are: "INPUT", "OUTPUT", "ANALOG", "SERVO"');
      error.name = 'Invariant Violation';

      expect(function () {
        (0, _HardwareManager.validatePayloadForPin)({ board: hw, readers: [] }, { pin: 17,
          value: 255,
          mode: 'PWM'
        });
      }).toThrow(error);
    });
  });

  describe('setPayloadForPin', function () {
    var hw = void 0;
    beforeEach(function () {
      // default Firmata pin mapping is an Uno
      hw = new _mockFirmata.Firmata();
      spyOn(hw, 'pinMode');
      spyOn(hw, 'digitalWrite');
      spyOn(hw, 'digitalRead');
      spyOn(hw, 'analogWrite');
      spyOn(hw, 'analogRead');
    });

    it('should handle an easy case', function () {
      var payload = {
        pin: 0,
        value: 255,
        mode: 'INPUT'
      };

      (0, _HardwareManager.setPayloadForPin)({ board: hw, readers: [] }, payload);

      expect(hw.pinMode).toHaveBeenCalled();
      expect(hw.digitalWrite).toHaveBeenCalledWith(payload.pin, payload.value);
    });

    it('should handle setting up read handlers', function () {
      var noop = function noop() {};
      var payload = {
        pin: 0,
        value: 255,
        mode: 'OUTPUT',
        onRead: noop
      };

      var connection = { board: hw, readers: [] };
      (0, _HardwareManager.setPayloadForPin)(connection, payload);

      expect(hw.pinMode).toHaveBeenCalled();
      expect(hw.digitalWrite).toHaveBeenCalledWith(payload.pin, payload.value);

      expect(hw.digitalRead.calls.first().args[0]).toBe(payload.pin);
      expect(connection.readers[0].call).toBe(payload.onRead);
    });

    // TODO: mock-firmata emit should work
    xit('should handle changing read handlers', function () {
      var before = jasmine.createSpy();
      var after = jasmine.createSpy();
      var initialPayload = {
        pin: 0,
        mode: 'OUTPUT',
        onRead: before
      };

      var updatePayload = {
        pin: 0,
        mode: 'OUTPUT',
        onRead: after
      };

      (0, _HardwareManager.setPayloadForPin)({ board: hw, readers: [] }, initialPayload);

      expect(hw.pinMode).toHaveBeenCalled();

      expect(hw.digitalRead).toHaveBeenCalledWith(initialPayload.pin, initialPayload.onRead);
      hw.emit('digital-read-0', Infinity);
      expect(before).toHaveBeenCalledWith(Infinity);

      (0, _HardwareManager.setPayloadForPin)({ board: hw }, updatePayload);
      hw.emit('digital-read-1', 3.1415);
      expect(before).toHaveBeenCalledWith(3.1415);
    });
  });
});