'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ReactHardwareMount = require('../ReactHardwareMount');

var _ReactHardwareMount2 = _interopRequireDefault(_ReactHardwareMount);

var _ReactHardwareDefaultInjection = require('../ReactHardwareDefaultInjection');

var _ReactHardwareDefaultInjection2 = _interopRequireDefault(_ReactHardwareDefaultInjection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_ReactHardwareDefaultInjection2.default.inject();

describe('ReactHardwareMount', function () {
  var PIN_DEFAULT_PROPS = {
    pin: 13,
    value: 255,
    mode: 'OUTPUT'
  };

  afterEach(function () {
    _ReactHardwareMount2.default._emptyCache();
  });

  describe('render', function () {
    it('should validate `nextElement`', function () {
      spyOn(console, 'error');
      // TODO make this validate it's a ReactHardwareComponent
      expect(function (_) {
        return _ReactHardwareMount2.default.render(_react2.default.createElement('pin', PIN_DEFAULT_PROPS));
      }).not.toThrow();

      expect(function (_) {
        return _ReactHardwareMount2.default.render();
      }).toThrowError('ReactHardware.render(): Invalid component element.');
    });

    it('should validate `container` port', function () {
      spyOn(console, 'error');
      var element = _react2.default.createElement('pin', PIN_DEFAULT_PROPS);

      _ReactHardwareMount2.default.render(element, '/dev/usb.whatever');
      expect(console.error).not.toHaveBeenCalled();

      _ReactHardwareMount2.default.render(element, '/dev/tty.Bluetooth-Incoming-Port');
      expect(console.error).toHaveBeenCalledWith('Warning: Attempting to render into a possibly invalid port: /dev/tty.Bluetooth-Incoming-Port');
    });

    it('should connect to the board', function (done) {
      var element = _react2.default.createElement('pin', PIN_DEFAULT_PROPS);

      _ReactHardwareMount2.default.render(element, '/dev/usb.whatever', function (inst) {
        expect(inst).toBeDefined();
        done();
      });
    });

    it('should warn when attempting to render into CONNECTING board', function () {
      spyOn(console, 'error');
      var element = _react2.default.createElement('pin', PIN_DEFAULT_PROPS);

      _ReactHardwareMount2.default.render(element, '/dev/usb.whatever');
      _ReactHardwareMount2.default.render(element, '/dev/usb.whatever');

      expect(console.error).toHaveBeenCalledWith('Warning: Attempting to render to port `' + '/dev/usb.whatever' + '` that is in the process of mounting. ' + 'You should wait until ReactHardware(comp, port, callback) callback is ' + 'called to render again');
    });

    it('should not warn when rerendering into a mounted component', function (done) {
      spyOn(console, 'error').and.callFake(function () {
        var _console;

        (_console = console).log.apply(_console, arguments);
      });
      var element = _react2.default.createElement('pin', PIN_DEFAULT_PROPS);

      _ReactHardwareMount2.default.render(element, '/dev/usb.whatever', function () {
        expect(console.error).not.toHaveBeenCalledWith('lol');
        done();
      });
    });

    // Maybe move these to ReactHardwareComponent-test.js
    describe('Lifecycle tests', function () {
      it('simple lifecycle test', function (done) {
        var willMount = jasmine.createSpy();
        var didMount = jasmine.createSpy();

        var Component = function (_React$Component) {
          _inherits(Component, _React$Component);

          function Component() {
            _classCallCheck(this, Component);

            return _possibleConstructorReturn(this, Object.getPrototypeOf(Component).apply(this, arguments));
          }

          _createClass(Component, [{
            key: 'componentWillMount',
            // eslint-disable-line
            value: function componentWillMount() {
              willMount();
            }
          }, {
            key: 'componentDidMount',
            value: function componentDidMount() {
              didMount();
            }
          }, {
            key: 'render',
            value: function render() {
              return _react2.default.createElement('pin', { pin: 13, value: 255, mode: 'OUTPUT' });
            }
          }]);

          return Component;
        }(_react2.default.Component);

        _ReactHardwareMount2.default.render(_react2.default.createElement(Component, null), '/dev/usb.whatever', function () {
          expect(willMount).toHaveBeenCalled();
          setTimeout(function () {
            expect(didMount).toHaveBeenCalled();
            done();
          });
        });
      });
    });
  });
});