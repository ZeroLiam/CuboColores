'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/**
 * diffProperties takes two sets of props and a set of valid attributes
 * and write to updatePayload the values that changed or were deleted.
 * If no updatePayload is provided, a new one is created and returned if
 * anything changed.
 */
var diffProperties = function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
  // first iterate through the next props
  for (var propKey in nextProps) {
    if (!validAttributes[propKey]) {
      continue; // not valid propKey
    }

    var prevProp = prevProps[propKey];
    var nextProp = nextProps[propKey];

    if (prevProp === nextProp) {
      continue; // nothing changed
    }

    (updatePayload || (updatePayload = {}))[propKey] = nextProp;
  }

  // iterate through previous props and flag for removal to reset to default
  for (var _propKey in prevProps) {
    if (nextProps[_propKey] !== undefined) {
      continue; // already covered this key in the previous pass
    }

    if (!validAttributes[_propKey]) {
      continue; // not valid propKey
    }

    var _prevProp = prevProps[_propKey];
    if (_prevProp === undefined) {
      continue; // was already empty anyway
    }

    // Pattern match on: validAttribute[propKey]
    if (_typeof(validAttributes[_propKey]) !== 'object') {
      // Flag the leaf property for removal
      (updatePayload || (updatePayload = {}))[_propKey] = null;
    }
  }

  return updatePayload;
};

var create = exports.create = function create(props, validAttributes) {
  var result = null;
  for (var p in props) {
    if (!validAttributes[p]) {
      continue;
    }

    (result || (result = {}))[p] = props[p];
  }

  return result;
};

var diff = exports.diff = function diff(prevProps, nextProps, validAttributes) {
  return diffProperties(null, prevProps, nextProps, validAttributes);
};