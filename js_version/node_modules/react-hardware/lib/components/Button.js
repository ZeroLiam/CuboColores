'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ReactHardware <Button /> component.
 *
 * <Button
 *   onDown={() => console.log('Button pressed')}
 *   onUp={() => console.log('Button depressed')}
 *   onChange={({value}) => console.log('Button changes to %s', value)}
 * />
 *
 * 
 **/

var Button = function (_Component) {
  _inherits(Button, _Component);

  function Button(props, context) {
    _classCallCheck(this, Button);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Button).call(this, props, context));

    _this.onRead = _this.onRead.bind(_this);
    return _this;
  }

  _createClass(Button, [{
    key: 'onRead',
    value: function onRead(value) {
      var _props = this.props;
      var onDown = _props.onDown;
      var onUp = _props.onUp;
      var onChange = _props.onChange;

      if (value === 1 && typeof onDown === 'function') {
        onDown({ value: value, type: 'down' });
      } else if (value === 0 && typeof onUp === 'function') {
        onUp({ value: value, type: 'up' });
      }

      if (typeof onChange === 'function') {
        onChange({ value: value, type: 'change' });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('pin', {
        pin: this.props.pin,
        onRead: this.onRead,
        mode: 'INPUT'
      });
    }
  }]);

  return Button;
}(_react.Component);

exports.default = Button;