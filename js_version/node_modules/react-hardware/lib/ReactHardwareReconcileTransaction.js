'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CallbackQueue = require('react/lib/CallbackQueue');

var _CallbackQueue2 = _interopRequireDefault(_CallbackQueue);

var _PooledClass = require('react/lib/PooledClass');

var _PooledClass2 = _interopRequireDefault(_PooledClass);

var _Transaction = require('react/lib/Transaction');

var _Transaction2 = _interopRequireDefault(_Transaction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks during
 * the performing of the transaction.
 */
var ON_HARDWARE_READY_QUEUEING = {
  /**
   * Initializes the internal firmata `connected` queue.
   */
  initialize: function initialize() {
    this.reactMountReady.reset();
  },

  /**
   * After Hardware is connected, invoke all registered `ready` callbacks.
   */
  close: function close() {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_HARDWARE_READY_QUEUEING];

function ReactHardwareReconcileTransaction() {
  this.reinitializeTransaction();
  this.reactMountReady = _CallbackQueue2.default.getPooled(null);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   */
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `ready` callbacks with.
   */
  getReactMountReady: function getReactMountReady() {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function destructor() {
    _CallbackQueue2.default.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

Object.assign(ReactHardwareReconcileTransaction.prototype, _Transaction2.default.Mixin, ReactHardwareReconcileTransaction, Mixin);

_PooledClass2.default.addPoolingTo(ReactHardwareReconcileTransaction);

exports.default = ReactHardwareReconcileTransaction;