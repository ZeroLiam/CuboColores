'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_VIEW_CONFIG = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

// import HardwareMethodsMixin from './HardwareMethodsMixin';
// import ReactHardwareComponentMixin from './ReactHardwareComponentMixin';


var _Container = require('./components/Container');

var _ReactMultiChild = require('react/lib/ReactMultiChild');

var _ReactMultiChild2 = _interopRequireDefault(_ReactMultiChild);

var _attributePayload = require('./attributePayload');

var _invariant = require('fbjs/lib/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _HardwareManager = require('./HardwareManager');

var HardwareManager = _interopRequireWildcard(_HardwareManager);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: typedef Transaction
var DEFAULT_VIEW_CONFIG = exports.DEFAULT_VIEW_CONFIG = {
  validAttributes: {
    mode: true,
    pin: true,
    value: true,
    onRead: true
  },
  uiViewClassName: 'GenericComponent'
};

/*
type ViewConfigPropTypes = {
  mode: 'INPUT'|'OUTPUT'|'ANALOG'|'PWM'| 'SERVO'|'SHIFT'|'I2C'|'ONEWIRE'|'STEPPER'|'IGNORE'|'UNKNOWN';
  pin?: number|string;
  pins?: Array<number>;
  value: number;
};
*/

/**
 * @constructor ReactHardwareComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 * @param {!object} viewConfig View Configuration.
 */
var ReactHardwareComponent = function ReactHardwareComponent(element) {
  this.viewConfig = DEFAULT_VIEW_CONFIG;
  this._rootNodeID = null;
  this._renderedChildren = null;
  this._io = null;
  this.construct(element);
};

/**
 * Mixin for hardware components.
 */
ReactHardwareComponent.Mixin = {
  // this is called when changing a component in the middle of a tree
  // currently a noop since _nativeNode is not defined.

  getNativeNode: function getNativeNode() {
    return this._nativeNode;
  },
  getPublicInstance: function getPublicInstance() {
    // TODO: This should probably use a composite wrapper
    return this;
  },


  // TODO: React 0.15 began removing construct calls and inlining directly into
  // the constructor
  construct: function construct(element) {
    this._currentElement = element;
  },
  unmountComponent: function unmountComponent() {
    // deleteAllListeners(this._rootNodeID);
    this.unmountChildren();
    this._rootNodeID = null;
  },


  /**
   * Updates the component's currently mounted representation.
   */
  receiveComponent: function receiveComponent(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;

    if (this._currentElement.props[_Container.CONTAINER_KEY] === _Container.CONTAINER_VALUE) {
      this.updateChildren(nextElement.props.children, transaction, context);
      return;
    }

    var updatePayload = Object.assign({}, nextElement.props, (0, _attributePayload.diff)(prevElement.props, nextElement.props, this.viewConfig.validAttributes));

    if (process.env.NODE_ENV !== 'production') {
      if (prevElement.props.pin) {
        (0, _invariant2.default)(prevElement.props.pin === nextElement.props.pin, 'A mounted component cannot be mounted into a new Pin. The `pin` ' + 'attribute is immutable. Check the render function of ' + nextElement.displayName + '.' // TODO
        );
      } else if (prevElement.props.pins) {
          console.log('TODO: multiple pins');
        }

      if (updatePayload) {
        HardwareManager.validatePayloadForPin(this._rootNodeID, updatePayload);
      }
    }

    if (updatePayload) {
      HardwareManager.setPayloadForPin(this._rootNodeID, updatePayload);
    }

    // TODO: _reconcileListenersUponUpdate(prevElement.props, nextElement.props)
    this.updateChildren(nextElement.props.children, transaction, context);
  },


  /**
   *
   */
  mountComponent: function mountComponent(transaction, // for creating/updating
  rootID, // Root ID of this subtree
  nativeContainerInfo, // nativeContainerInfo
  context // secret context, shhhh
  ) {
    rootID = (typeof rootID === 'undefined' ? 'undefined' : _typeof(rootID)) === 'object' ? rootID._rootNodeID : rootID;

    this._rootNodeID = rootID;
    if (this._currentElement.props[_Container.CONTAINER_KEY] === _Container.CONTAINER_VALUE) {
      this.initializeChildren(this._currentElement.props.children, transaction, context);

      return rootID;
    }

    var payload = (0, _attributePayload.create)(this._currentElement.props, // next props
    this.viewConfig.validAttributes);

    if (payload) {
      if (process.env.NODE_ENV !== 'production') {
        HardwareManager.validatePayloadForPin(rootID, payload);
      }
    }

    HardwareManager.setPayloadForPin(rootID, payload);

    // TODO register listeners

    // TODO: figure out what this should be for RH.
    // ReactNative initializeChildren(children, tag, transaction, context);
    //   https://github.com/facebook/react-native/blob/9f48c004ba866aa24d17242a817929462a091179/Libraries/ReactNative/ReactNativeBaseComponent.js
    //
    // ReactDOM _createInitialChildren(transaction, props, context, lazyTree);
    //   https://github.com/facebook/react/blob/master/src/renderers/dom/shared/ReactDOMComponent.js#L725
    this.initializeChildren(this._currentElement.props.children, transaction, context);

    return rootID;
  },
  initializeChildren: function initializeChildren(children, transaction, // for creating/updating
  context // secret context, shhhh
  ) {
    this.mountChildren(children, transaction, context);
  }
};

/**
 * Order of mixins is important. ReactHardwareComponent overrides methods in
 * ReactMultiChild.
 */
Object.assign(ReactHardwareComponent.prototype, _ReactMultiChild2.default.Mixin, ReactHardwareComponent.Mixin);

exports.default = ReactHardwareComponent;